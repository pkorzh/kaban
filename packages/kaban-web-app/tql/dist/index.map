{"version":3,"sources":["ast.js","predicate.js","mongo.js","index.js"],"names":["tree","regex","tokens","source","pos","isOperatorPart","w","find","op","indexOf","isIdentifierPart","ch","test","NonAsciiIdentifierPart","consume","charAt","peek","at","getNextToken","token","lexeme","skipWhiteSpaces","length","tag","operator","stash","push","join","isIdentifierStart","NonAsciiIdentifierStart","identifier","ISODate","d","parseInt","isNaN","isFinite","isDecimal","isBool","isField","quote","string","eof","Error","parslets","i","parslet","index","field","substr","JSON","stringify","e","consumeIf","is","criterias","c","branch","args","predicate","require","resolve","astb","generate","lVal","left","rVal","right","map","fn","code","Function","_tokens","fnCode","debug","_tree","query","$or","mongo"],"mappings":"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","file":"index.map","sourceRoot":"..","sourcesContent":["const regex = {\n    // Unicode v11.0.0 NonAsciiIdentifierStart:\n    NonAsciiIdentifierStart: /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1878\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEF\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7B9\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF2D-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDD00-\\uDD23\\uDF00-\\uDF1C\\uDF27\\uDF30-\\uDF45]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD44\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF1A]|\\uD806[\\uDC00-\\uDC2B\\uDCA0-\\uDCDF\\uDCFF\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE83\\uDE86-\\uDE89\\uDE9D\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD89\\uDD98\\uDEE0-\\uDEF2]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE7F\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1]|\\uD821[\\uDC00-\\uDFF1]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]/,\n    // Unicode v11.0.0 NonAsciiIdentifierPart:\n    NonAsciiIdentifierPart: /[\\xAA\\xB5\\xB7\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u07FD\\u0800-\\u082D\\u0840-\\u085B\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u08D3-\\u08E1\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u09FC\\u09FE\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9-\\u0AFF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C80-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D00-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D54-\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u1371\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1878\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CD0-\\u1CD2\\u1CD4-\\u1CF9\\u1D00-\\u1DF9\\u1DFB-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEF\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7B9\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF2D-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDD00-\\uDD27\\uDD30-\\uDD39\\uDF00-\\uDF1C\\uDF27\\uDF30-\\uDF50]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD44-\\uDD46\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDC9-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE3E\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3B-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC00-\\uDC4A\\uDC50-\\uDC59\\uDC5E\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF1A\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDC00-\\uDC3A\\uDCA0-\\uDCE9\\uDCFF\\uDE00-\\uDE3E\\uDE47\\uDE50-\\uDE83\\uDE86-\\uDE99\\uDE9D\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC36\\uDC38-\\uDC40\\uDC50-\\uDC59\\uDC72-\\uDC8F\\uDC92-\\uDCA7\\uDCA9-\\uDCB6\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD36\\uDD3A\\uDD3C\\uDD3D\\uDD3F-\\uDD47\\uDD50-\\uDD59\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD8E\\uDD90\\uDD91\\uDD93-\\uDD98\\uDDA0-\\uDDA9\\uDEE0-\\uDEF6]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE7F\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F\\uDFE0\\uDFE1]|\\uD821[\\uDC00-\\uDFF1]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6\\uDD00-\\uDD4A\\uDD50-\\uDD59]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/\n};\n\nfunction tokens(source) {\n\tlet pos = 0\n\n\tconst isBool = (lexeme) => ['and', 'or'].indexOf(lexeme) !== -1\n\tconst isField = (lexeme) => ['board', 'key', 'assignee', 'reporter', 'status', 'backlog', 'type', 'priority', 'resolution', 'createdAt', 'updatedAt']\n\t\t.indexOf(lexeme) !== -1\n\tconst isDecimal = (lexeme) => {\n\t\tconst d = parseInt(lexeme)\n\t\treturn /^\\d+$/.test(lexeme) && !isNaN(d) && isFinite(d)\n\t}\n\n\tconst isDate = (lexeme) => {\n\t\treturn /\\b[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z\\b/\n\t\t\t.test(lexeme)\n\t}\n\n\tconst isOperator = (w) => ['>', '<', '=', '!=', '<=', '>=', 'in'].indexOf(w) !== -1\n\tconst isOperatorPart = (w) => ['>', '<', '=', '!=', '<=', '>=', 'in']\n\t\t.find(op => op.indexOf(w) !==-1)\n\n\tconst isWhiteSpace = (ch) => /\\s/.test(ch)\n\tconst isIdentifierStart = (ch) =>\n\t\t/([$_a-zA-Z]|[0-9])/.test(ch) || regex.NonAsciiIdentifierStart.test(ch)\n\tconst isIdentifierPart = (ch) =>\n\t\t/([$_\\-a-zA-Z]|[0-9])/.test(ch) || regex.NonAsciiIdentifierPart.test(ch)\n\n\tconst consume = () => source.charAt(pos++)\n\tconst peek = (at) => source.charAt(pos + (at || 0))\n\n\tconst skipWhiteSpaces = () => {\n\t\tfor(;; consume()) {\n\t\t\tif (!isWhiteSpace(peek())) {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\n\tconst getNextToken = () => {\n\t\tconst token = {}\n\n\t\tskipWhiteSpaces()\n\n\t\tif (pos >= source.length) {\n\t\t\ttoken.lexeme = token.tag = 'eof';\n\t\t}\n\n\t\tif (isOperatorPart(peek()) && !token.tag) {\n\t\t\tlet operator = []\n\n\t\t\tconst stash = pos\n\n\t\t\tdo {\n\t\t\t\toperator.push(peek())\n\t\t\t\tconsume()\n\t\t\t} while (isOperatorPart(peek()))\n\n\t\t\toperator = operator.join('')\n\n\t\t\tif (!isOperator(operator)) {\n\t\t\t\tpos = stash\n\t\t\t} else {\n\t\t\t\ttoken.lexeme = operator\n\t\t\t\ttoken.tag = 'op'\n\t\t\t}\n\t\t}\n\n\t\tif (isIdentifierStart(peek()) && !token.tag) {\n\t\t\tvar identifier = []\n\n\t\t\tdo {\n\t\t\t\tidentifier.push(peek())\n\t\t\t\tconsume();\n\t\t\t} while (isIdentifierPart(peek()))\n\n\t\t\ttoken.lexeme = identifier.join('');\n\n\t\t\tif (isDate(token.lexeme)) {\n\t\t\t\ttoken.lexeme = ISODate(token.lexeme)\n\t\t\t\ttoken.tag = 'date';\n\t\t\t} else if (isDecimal(token.lexeme)) {\n\t\t\t\ttoken.lexeme = parseInt(token.lexeme)\n\t\t\t\ttoken.tag = 'decimal';\n\t\t\t} else if (isBool(token.lexeme)) {\n\t\t\t\ttoken.tag = 'bool';\n\t\t\t} else if (isField(token.lexeme)) {\n\t\t\t\ttoken.tag = 'field';\n\t\t\t} else {\n\t\t\t\ttoken.tag = 'id';\n\t\t\t}\n\t\t}\n\n\t\tif ((peek() === '\\'' || peek() === '\"') && !token.tag) {\n\t\t\tlet quote = peek()\n\t\t\tlet string = []\n\n\t\t\tconsume();\n\n\t\t\tif (peek() !== quote) {\n\t\t\t\tdo {\n\t\t\t\t\tif (peek() === '\\\\') {\n\t\t\t\t\t\tconsume();\n\n\t\t\t\t\t\tswitch(peek()) {\n\t\t\t\t\t\t\tcase 'n':\n\t\t\t\t\t\t\t\tstring.push('\\n');\n\t\t\t\t\t\t\t\tconsume();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'r':\n\t\t\t\t\t\t\t\tstring.push('\\r');\n\t\t\t\t\t\t\t\tconsume();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 't':\n\t\t\t\t\t\t\t\tstring.push('\\t');\n\t\t\t\t\t\t\t\tconsume();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'b':\n\t\t\t\t\t\t\t\tstring.push('\\b');\n\t\t\t\t\t\t\t\tconsume();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'f':\n\t\t\t\t\t\t\t\tstring.push('\\f');\n\t\t\t\t\t\t\t\tconsume();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tstring.push(peek())\n\t\t\t\t\t\t\t\tconsume()\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstring.push(peek())\n\t\t\t\t\t\tconsume()\n\t\t\t\t\t}\n\t\t\t\t} while (peek() !== quote)\n\n\t\t\t\tconsume()\n\t\t\t} else {\n\t\t\t\tconsume()\n\t\t\t}\n\n\t\t\tstring = string.join('')\n\n\t\t\ttoken.lexeme = string\n\t\t\ttoken.tag = 'string'\n\t\t}\n\n\t\tif (!token.tag) {\n\t\t\ttoken.lexeme = token.tag = consume()\n\t\t}\n\n\t\treturn token\n\t}\n\n\tconst tokens = []\n\tlet token;\n\n\twhile((token = getNextToken()).tag !== 'eof') {\n\t\ttokens.push(token);\n\t}\n\n\treturn tokens\n}\n\nfunction tree(tokens) {\n\tlet pos = 0\n\n\tconst eof = () => pos >= tokens.length\n\tconst peek = () => tokens[pos]\n\tconst consume = function(...parslets) {\n\t\tif (eof()) {\n\t\t\tthrow new Error('eof')\n\t\t}\n\n\t\tif (!parslets.length) {\n\t\t\treturn tokens[pos++]\n\t\t}\n\n\t\tfor(let i = 0; i < parslets.length; i++) {\n\t\t\tlet parslet = parslets[i]\n\t\t\tconst index = pos\n\n\t\t\ttry {\n\t\t\t\tif (typeof parslet === 'string') {\n\t\t\t\t\tlet field = 'lexeme'\n\n\t\t\t\t\tif (parslet.charAt(0) === ':' && parslet.length !== 1) {\n\t\t\t\t\t\tparslet = parslet.substr(1);\n\t\t\t\t\t\tfield = 'tag';\n\t\t\t\t\t}\n\n\t\t\t\t\tif (tokens[pos][field] === parslet) {\n\t\t\t\t\t\treturn tokens[pos++]\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error(`Expected ${parslet} got ${JSON.stringify(peek())}`)\n\t\t\t\t\t}\n\t\t\t\t} else if (typeof parslet === 'function') {\n\t\t\t\t\treturn parslet()\n\t\t\t\t}\n\t\t\t} catch(e) {\n\t\t\t\tpos = index\n\n\t\t\t\tif (i == parslets.length -1) {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error('Cant match parslets ${...parslets}')\n\t}\n\n\tconst consumeIf = (...parslets) => {\n\t\tconst index = pos\n\n\t\ttry {\n\t\t\treturn consume(...parslets)\n\t\t} catch(e) {\n\t\t\tpos = index\n\t\t\treturn false\n\t\t}\n\t}\n\n\tconst is = (...parslets) => {\n\t\tconst index = pos\n\n\t\ttry {\n\t\t\tconsume(...parslets)\n\t\t} catch(e) {\n\t\t\treturn false\n\t\t} finally {\n\t\t\tpos = index\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/////////////////////\n\n\n\n\tconst sequence = (...parslets) => () => {\n\t\tlet seq = []\n\t\tlet item\n\n\t\twhile(item = consumeIf(...parslets)) {\n\t\t\tseq.push(item);\n\t\t}\n\n\t\tif (!seq.length) {\n\t\t\tthrow new Error('Empty sequence');\n\t\t}\n\n\t\treturn seq\n\t}\n\n\tconst criteria = () => () => {\n\t\tconst branch = {\n\t\t\tleft: consume(':field'),\n\t\t\top: consume(':op'),\n\t\t\tright: consume(\n\t\t\t\t':id',\n\t\t\t\t':string',\n\t\t\t\t':decimal',\n\t\t\t\t':field',\n\t\t\t\t() => {\n\t\t\t\t\tconsume('[')\n\n\t\t\t\t\tconst args = []\n\n\t\t\t\t\twhile(!consumeIf(']')) {\n\t\t\t\t\t\targs.push(consume(':id', ':string', ':decimal'))\n\n\t\t\t\t\t\tconsumeIf(',')\n\t\t\t\t\t}\n\n\t\t\t\t\treturn args\n\t\t\t\t}\n\t\t\t),\n\t\t}\n\n\t\treturn branch\n\t}\n\n\tconst criterias = () => () => {\n\t\tlet c\n\n\t\tif (consumeIf('(')) {\n\t\t\tc = consume(criterias())\n\t\t\tconsume(')')\n\t\t} else {\n\t\t\tc = consume(criteria())\n\t\t}\n\n\t\twhile(!eof() && is(':bool')) {\n\t\t\tc = {\n\t\t\t\tleft: c,\n\t\t\t\top: consume(':bool'),\n\t\t\t\tright: consume(criterias())\n\t\t\t}\n\t\t}\n\n\t\treturn c\n\t}\n\n\treturn consume(criterias())\n}\n\nexport {\n\ttokens,\n\ttree,\n}\n","const { tokens, tree } = require('./ast')\n\nfunction resolve(astb) {\n\n\tif (astb.tag === 'bool') {\n\t\treturn generate(astb)\n\t} else if (astb.tag === 'op') {\n\t\tswitch(astb.lexeme) {\n\t\t\tcase 'in':\n\t\t\t\treturn {\n\t\t\t\t\tfn: 'indexOf'\n\t\t\t\t}\n\t\t\tcase '=':\n\t\t\t\treturn '=='\n\t\t\tdefault:\n\t\t\t\treturn astb.lexeme\n\t\t}\n\t} else {\n\t\tconst lVal = astb.left.lexeme === 'key'\n\t\t\t? astb.left.lexeme\n\t\t\t: `${astb.left.lexeme}.key`\n\n\t\tconst rVal = astb.right.lexeme\n\t\t\t? astb.right.lexeme\n\t\t\t: astb.right.map(astb => astb.lexeme)\n\n\t\tconst op = resolve(astb.op)\n\n\t\tif (op.fn === 'indexOf') {\n\t\t\treturn `${JSON.stringify(rVal)}.${op.fn}(obj.${lVal}) !== -1`\n\t\t} else {\n\t\t\treturn `obj.${lVal} ${op} '${rVal}'`\n\t\t}\n\t}\n}\n\nfunction generate(astb) {\n\tlet code = 'return false'\n\n\tif (astb.op.lexeme === 'and') {\n\t\tcode =  `${resolve(astb.left)} && ${resolve(astb.right)}`\n\t} else if (astb.op.lexeme === 'or') {\n\t\tcode =  `${resolve(astb.left)} || ${resolve(astb.right)}`\n\t} else {\n\t\tcode = `${resolve(astb)}`\n\t}\n\n\treturn `return ${code};`\n}\n\nfunction predicate(source) {\n\tif (!source || source.length == 0) {\n\t\treturn new Function('obj', 'return false')\n\t}\n\n\tconst _tokens = tokens(source)\n\tconst _tree = tree(_tokens)\n\n\tconst fnCode = generate(_tree)\n\n\treturn new Function('obj', fnCode);\n}\n\nexport default predicate\n","const { tokens, tree } = require('./ast')\n\nfunction resolve(astb) {\n\n\tif (astb.tag === 'bool') {\n\t\treturn generate(astb)\n\t} else if (astb.tag === 'op') {\n\t\tswitch(astb.lexeme) {\n\t\t\tcase '=':\n\t\t\t\treturn '$eq'\n\t\t\tcase '!=':\n\t\t\t\treturn '$ne'\n\t\t\tcase '>':\n\t\t\t\treturn '$gt'\n\t\t\tcase '<':\n\t\t\t\treturn '$lt'\n\t\t\tcase '>=':\n\t\t\t\treturn '$gte'\n\t\t\tcase '<=':\n\t\t\t\treturn '$lte'\n\t\t\tcase 'in':\n\t\t\t\treturn '$in'\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unexpected operator ${astb.lexeme}`)\n\t\t}\n\t} else if (astb.tag === 'date') {\n\t\tconst lVal = astb.left.lexeme\n\n\t\tconst rVal = ISODate(astb.right.lexeme)\n\n\t\treturn {\n\t\t\t[lVal]: {\n\t\t\t\t[resolve(astb.op)]: rVal\n\t\t\t}\n\t\t}\n\t} else {\n\t\tconst lVal = astb.left.lexeme === 'key' || astb.left.lexeme === 'createdAt' || astb.left.lexeme === 'updatedAt'\n\t\t\t? astb.left.lexeme\n\t\t\t: `${astb.left.lexeme}.key`\n\n\t\tconst rVal = astb.right.lexeme\n\t\t\t? astb.right.lexeme\n\t\t\t: astb.right.map(astb => astb.lexeme)\n\n\t\treturn {\n\t\t\t[lVal]: {\n\t\t\t\t[resolve(astb.op)]: rVal\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction generate(astb) {\n\tif (astb.op.lexeme === 'and') {\n\t\treturn {\n\t\t\t...resolve(astb.left),\n\t\t\t...resolve(astb.right)\n\t\t}\n\t} else if (astb.op.lexeme === 'or') {\n\t\treturn {$or: [\n\t\t\tresolve(astb.left),\n\t\t\tresolve(astb.right)\n\t\t]}\n\t} else {\n\t\treturn resolve(astb)\n\t}\n}\n\nexport default function(source) {\n\tif (!source || source.length == 0) {\n\t\treturn {}\n\t}\n\n\tconst _tokens = tokens(source)\n\tconsole.debug('tokens', _tokens)\n\n\tconst _tree = tree(_tokens)\n\tconsole.debug('tree', _tree)\n\n\tconst query = generate(_tree)\n\tconsole.debug('query', query)\n\n\treturn query\n}\n","export * from './ast'\n\nimport predicate from './predicate'\nimport mongo from './mongo'\n\nexport {\n\tpredicate,\n\tmongo,\n}\n"]}